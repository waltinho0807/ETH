{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport Lottery from '../../ethereum/lottery';\nimport { Card, Grid } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport EntryForm from '../../components/EntryForm';\n\nclass LotteryShow extends Component {\n  static async getInitialProps(props) {\n    const lottery = Lottery(props.query.address);\n    const players = await lottery.methods.getPlayers().call();\n    const premium = await lottery.methods.getPremium().call();\n    const restPlayers = await lottery.methods.getRestPlayers().call();\n    const countPlayers = await lottery.methods.getCountPlayers().call();\n    const entryValue = await lottery.methods.entryValue().call();\n    console.log(entryValue); //console.log(premium);\n    //console.log(restPlayers);\n    //console.log(countPlayers);\n\n    return {\n      numberOfPlayers: players,\n      valuePremium: premium,\n      restPlayers: restPlayers,\n      countPlayers: countPlayers\n    };\n  }\n\n  renderCards() {\n    const {\n      numberOfPlayers,\n      valuePremium,\n      restPlayers,\n      countPlayers\n    } = this.props;\n    const items = [{\n      header: web3.utils.fromWei(valuePremium, 'ether'),\n      meta: 'Value of Premium',\n      description: 'The value of premium for winner the raffle',\n      style: {\n        overflowWrap: 'break-word'\n      }\n    }, {\n      header: restPlayers,\n      meta: 'How many remain',\n      description: 'Number of participants left to complete the draw',\n      style: {\n        overflowWrap: 'break-word'\n      }\n    }, {\n      header: countPlayers,\n      meta: 'Number of players',\n      description: 'Number of players to carry out the draw',\n      style: {\n        overflowWrap: 'break-word'\n      }\n    }, {\n      header: numberOfPlayers,\n      meta: 'Already entered',\n      description: 'Players who have already joined',\n      style: {\n        overflowWrap: 'break-word'\n      }\n    }];\n    return __jsx(Card.Group, {\n      items: items\n    });\n  }\n\n  valueEntry() {\n    const {\n      entryValue\n    } = this.props;\n    const entry = [{\n      header: entryValue,\n      meta: 'Value to enter ',\n      description: 'Value to contribute to this raffle',\n      style: {\n        overflowWrap: 'break-word'\n      }\n    }];\n    return __jsx(Card.Group, {\n      items: entry\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Column, {\n      width: 10\n    }, this.valueEntry()), __jsx(Grid.Column, {\n      width: 10\n    }, this.renderCards()), __jsx(Grid.Column, {\n      width: 6\n    }, __jsx(EntryForm, null))));\n  }\n\n}\n\nexport default LotteryShow;","map":{"version":3,"sources":["C:/Users/walti/OneDrive/√Årea de Trabalho/LotteryTest2/pages/lottery/show.js"],"names":["React","Component","Layout","Lottery","Card","Grid","web3","EntryForm","LotteryShow","getInitialProps","props","lottery","query","address","players","methods","getPlayers","call","premium","getPremium","restPlayers","getRestPlayers","countPlayers","getCountPlayers","entryValue","console","log","numberOfPlayers","valuePremium","renderCards","items","header","utils","fromWei","meta","description","style","overflowWrap","valueEntry","entry","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../../components/Layout';\r\nimport Lottery from '../../ethereum/lottery';\r\nimport { Card, Grid } from 'semantic-ui-react';\r\nimport web3 from '../../ethereum/web3';\r\nimport EntryForm from '../../components/EntryForm';\r\n\r\nclass LotteryShow extends Component {\r\n    static async getInitialProps(props) {\r\n        const lottery = Lottery(props.query.address);\r\n\r\n\r\n\r\n        const players = await lottery.methods.getPlayers().call();\r\n        const premium = await lottery.methods.getPremium().call();\r\n        const restPlayers = await lottery.methods.getRestPlayers().call();\r\n        const countPlayers = await lottery.methods.getCountPlayers().call();\r\n        const entryValue = await lottery.methods.entryValue().call();\r\n\r\n        console.log(entryValue);\r\n        //console.log(premium);\r\n        //console.log(restPlayers);\r\n        //console.log(countPlayers);\r\n\r\n        return {\r\n            numberOfPlayers: players,\r\n            valuePremium: premium,\r\n            restPlayers: restPlayers,\r\n            countPlayers: countPlayers\r\n        };\r\n    }\r\n\r\n    renderCards() {\r\n        const {\r\n            numberOfPlayers,\r\n            valuePremium,\r\n            restPlayers,\r\n            countPlayers\r\n        } = this.props;\r\n        const items = [{\r\n            header: web3.utils.fromWei(valuePremium, 'ether'),\r\n            meta: 'Value of Premium',\r\n            description: 'The value of premium for winner the raffle',\r\n            style: { overflowWrap: 'break-word' }\r\n        },\r\n        {\r\n            header: restPlayers,\r\n            meta: 'How many remain',\r\n            description: 'Number of participants left to complete the draw',\r\n            style: { overflowWrap: 'break-word' }\r\n        },\r\n        {\r\n            header: countPlayers,\r\n            meta: 'Number of players',\r\n            description: 'Number of players to carry out the draw',\r\n            style: { overflowWrap: 'break-word' }\r\n        },\r\n        {\r\n            header: numberOfPlayers,\r\n            meta: 'Already entered',\r\n            description: 'Players who have already joined',\r\n            style: { overflowWrap: 'break-word' }\r\n        }];\r\n\r\n        return <Card.Group items={items} />\r\n    };\r\n\r\n    valueEntry(){\r\n        const {entryValue} = this.props;\r\n        const entry = [{\r\n            header: entryValue,\r\n            meta: 'Value to enter ',\r\n            description: 'Value to contribute to this raffle',\r\n            style: { overflowWrap: 'break-word' }\r\n        }];\r\n\r\n        return <Card.Group items={entry}/>\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Grid>\r\n                <Grid.Column width={10}>\r\n                        {this.valueEntry()}\r\n                    </Grid.Column>\r\n                    <Grid.Column width={10}>\r\n                        {this.renderCards()}\r\n                    </Grid.Column>\r\n                    <Grid.Column width={6}>\r\n                        <EntryForm />\r\n                    </Grid.Column>\r\n                </Grid>\r\n\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LotteryShow;"]},"metadata":{},"sourceType":"module"}