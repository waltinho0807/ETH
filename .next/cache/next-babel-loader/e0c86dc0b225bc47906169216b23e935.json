{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport Lottery from '../../ethereum/lottery';\nimport { Card, Grid, Button } from 'semantic-ui-react';\nimport web3 from '../../ethereum/web3';\nimport EntryForm from '../../components/EntryForm';\nimport PickWinner from '../../components/PickWinner';\nimport { Link } from '../../routes';\n\nvar LotteryShow = /*#__PURE__*/function (_Component) {\n  _inherits(LotteryShow, _Component);\n\n  var _super = _createSuper(LotteryShow);\n\n  function LotteryShow() {\n    _classCallCheck(this, LotteryShow);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LotteryShow, [{\n    key: \"renderCards\",\n    value: function renderCards() {\n      var _this$props = this.props,\n          numberOfPlayers = _this$props.numberOfPlayers,\n          valuePremium = _this$props.valuePremium,\n          restPlayers = _this$props.restPlayers,\n          countPlayers = _this$props.countPlayers,\n          convert = _this$props.convert;\n      var items = [{\n        header: web3.utils.fromWei(convert, 'ether'),\n        meta: 'Value to contribute to this raffle',\n        description: 'The value of premium for winner the raffle',\n        style: {\n          overflowWrap: 'break-word'\n        }\n      }, {\n        header: web3.utils.fromWei(valuePremium, 'ether'),\n        meta: 'Value of Premium',\n        description: 'The value of premium for winner the raffle',\n        style: {\n          overflowWrap: 'break-word'\n        }\n      }, {\n        header: restPlayers,\n        meta: 'How many remain',\n        description: 'Number of participants left to complete the draw',\n        style: {\n          overflowWrap: 'break-word'\n        }\n      }, {\n        header: countPlayers,\n        meta: 'Number of players',\n        description: 'Number of players to carry out the draw',\n        style: {\n          overflowWrap: 'break-word'\n        }\n      }, {\n        header: numberOfPlayers,\n        meta: 'Already entered',\n        description: 'Players who have already joined',\n        style: {\n          overflowWrap: 'break-word'\n        }\n      }];\n      return __jsx(Card.Group, {\n        items: items\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, null, __jsx(Grid, null, __jsx(Grid.Column, {\n        width: 10\n      }, this.renderCards()), __jsx(Grid.Column, {\n        width: 6\n      }, __jsx(EntryForm, {\n        address: this.props.address\n      }), __jsx(PickWinner, null))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(props) {\n        var lottery, players, premium, restPlayers, countPlayers, entryValue, convert, convertBin;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                lottery = Lottery(props.query.address);\n                _context.next = 3;\n                return lottery.methods.getPlayers().call();\n\n              case 3:\n                players = _context.sent;\n                _context.next = 6;\n                return lottery.methods.getPremium().call();\n\n              case 6:\n                premium = _context.sent;\n                _context.next = 9;\n                return lottery.methods.getRestPlayers().call();\n\n              case 9:\n                restPlayers = _context.sent;\n                _context.next = 12;\n                return lottery.methods.getCountPlayers().call();\n\n              case 12:\n                countPlayers = _context.sent;\n                _context.next = 15;\n                return lottery.methods.entryValue().call();\n\n              case 15:\n                entryValue = _context.sent;\n                convert = String(entryValue);\n                convertBin = parseInt(restPlayers, 9); //console.log(premium);\n                //console.log(restPlayers);\n                //console.log(countPlayers);\n\n                return _context.abrupt(\"return\", {\n                  address: props.query.address,\n                  numberOfPlayers: players,\n                  valuePremium: premium,\n                  restPlayers: restPlayers,\n                  countPlayers: countPlayers,\n                  convert: convert\n                });\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return LotteryShow;\n}(Component);\n\nexport default LotteryShow;","map":{"version":3,"sources":["C:/Users/walti/OneDrive/√Årea de Trabalho/LotteryTest2/pages/lottery/show.js"],"names":["React","Component","Layout","Lottery","Card","Grid","Button","web3","EntryForm","PickWinner","Link","LotteryShow","props","numberOfPlayers","valuePremium","restPlayers","countPlayers","convert","items","header","utils","fromWei","meta","description","style","overflowWrap","renderCards","address","lottery","query","methods","getPlayers","call","players","getPremium","premium","getRestPlayers","getCountPlayers","entryValue","String","convertBin","parseInt"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Layout from '../../components/Layout';\r\nimport Lottery from '../../ethereum/lottery';\r\nimport { Card, Grid, Button } from 'semantic-ui-react';\r\nimport web3 from '../../ethereum/web3';\r\nimport EntryForm from '../../components/EntryForm';\r\nimport PickWinner from '../../components/PickWinner';\r\nimport {Link} from '../../routes';\r\n\r\nclass LotteryShow extends Component {\r\n    static async getInitialProps(props) {\r\n        const lottery = Lottery(props.query.address);\r\n\r\n\r\n\r\n        const players = await lottery.methods.getPlayers().call();\r\n        const premium = await lottery.methods.getPremium().call();\r\n        const restPlayers = await lottery.methods.getRestPlayers().call();\r\n        const countPlayers = await lottery.methods.getCountPlayers().call();\r\n        const entryValue = await lottery.methods.entryValue().call();\r\n\r\n        const convert = String(entryValue);\r\n        const convertBin = parseInt(restPlayers, 9);\r\n        \r\n        //console.log(premium);\r\n        //console.log(restPlayers);\r\n        //console.log(countPlayers);\r\n\r\n        return {\r\n            address: props.query.address,\r\n            numberOfPlayers: players,\r\n            valuePremium: premium,\r\n            restPlayers: restPlayers,\r\n            countPlayers: countPlayers,\r\n            convert: convert\r\n        };\r\n    }\r\n\r\n    renderCards() {\r\n        const {\r\n            numberOfPlayers,\r\n            valuePremium,\r\n            restPlayers,\r\n            countPlayers,\r\n           convert\r\n        } = this.props;\r\n        const items = [\r\n            {\r\n                header: web3.utils.fromWei(convert, 'ether'),\r\n                meta: 'Value to contribute to this raffle',\r\n                description: 'The value of premium for winner the raffle',\r\n                style: { overflowWrap: 'break-word' }\r\n            },\r\n            {\r\n                header: web3.utils.fromWei(valuePremium, 'ether'),\r\n                meta: 'Value of Premium',\r\n                description: 'The value of premium for winner the raffle',\r\n                style: { overflowWrap: 'break-word' }\r\n            },\r\n            {\r\n                header: restPlayers,\r\n                meta: 'How many remain',\r\n                description: 'Number of participants left to complete the draw',\r\n                style: { overflowWrap: 'break-word' }\r\n            },\r\n            {\r\n                header: countPlayers,\r\n                meta: 'Number of players',\r\n                description: 'Number of players to carry out the draw',\r\n                style: { overflowWrap: 'break-word' }\r\n            },\r\n            {\r\n                header: numberOfPlayers,\r\n                meta: 'Already entered',\r\n                description: 'Players who have already joined',\r\n                style: { overflowWrap: 'break-word' }\r\n            }];\r\n\r\n        return <Card.Group items={items} />\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Layout>\r\n                <Grid>\r\n                    <Grid.Column width={10}>\r\n                        \r\n                        {this.renderCards()}\r\n                    </Grid.Column>\r\n                    <Grid.Column width={6}>\r\n                        <EntryForm address={this.props.address} />\r\n                        <PickWinner />\r\n                    </Grid.Column>\r\n                </Grid>\r\n\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LotteryShow;"]},"metadata":{},"sourceType":"module"}