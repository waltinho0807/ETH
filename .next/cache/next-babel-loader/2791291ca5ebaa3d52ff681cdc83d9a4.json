{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport Lottery from '../../ethereum/lottery';\nimport { Card } from 'semantic-ui-react';\n\nclass LotteryShow extends Component {\n  static async getInitialProps(props) {\n    const lottery = Lottery(props.query.address);\n    const players = await lottery.methods.getPlayers().call();\n    const premium = await lottery.methods.getPremium().call();\n    const restPlayers = await lottery.methods.getRestPlayers().call();\n    const countPlayers = await lottery.methods.getCountPlayers().call();\n    console.log(players); //console.log(premium);\n    //console.log(restPlayers);\n    //console.log(countPlayers);\n\n    return {\n      numberOfPlayers: players,\n      valuePremium: premium,\n      restPlayers: restPlayers,\n      countPlayers: countPlayers\n    };\n  }\n\n  renderCards() {\n    const {\n      numberOfPlayers,\n      valuePremium,\n      restPlayers,\n      countPlayers\n    } = this.props;\n    const items = [{\n      header: valuePremium,\n      meta: 'Value of Premium',\n      description: 'The value of premium for winner the raffle',\n      style: {\n        overflowWrap: 'break-word'\n      }\n    }, {\n      header: restPlayers,\n      meta: 'How many remain',\n      description: 'Number of participants left to complete the draw',\n      style: {\n        overflowWrap: 'break-word'\n      }\n    }, {\n      header: countPlayers,\n      meta: 'Number of players',\n      description: 'Number of players to carry out the draw',\n      style: {\n        overflowWrap: 'break-word'\n      }\n    }, {\n      header: numberOfPlayers,\n      meta: 'Already entered',\n      description: 'Players who have already joined',\n      style: {\n        overflowWrap: 'break-word'\n      }\n    }];\n    return __jsx(Card.Group, {\n      items: items\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, this.renderCards());\n  }\n\n}\n\nexport default LotteryShow;","map":{"version":3,"sources":["C:/Users/walti/OneDrive/√Årea de Trabalho/LotteryTest2/pages/lottery/show.js"],"names":["React","Component","Layout","Lottery","Card","LotteryShow","getInitialProps","props","lottery","query","address","players","methods","getPlayers","call","premium","getPremium","restPlayers","getRestPlayers","countPlayers","getCountPlayers","console","log","numberOfPlayers","valuePremium","renderCards","items","header","meta","description","style","overflowWrap","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,IAAT,QAAqB,mBAArB;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAChC,eAAaK,eAAb,CAA6BC,KAA7B,EAAmC;AAC7B,UAAMC,OAAO,GAAEL,OAAO,CAACI,KAAK,CAACE,KAAN,CAAYC,OAAb,CAAtB;AAIA,UAAMC,OAAO,GAAG,MAAMH,OAAO,CAACI,OAAR,CAAgBC,UAAhB,GAA6BC,IAA7B,EAAtB;AACA,UAAMC,OAAO,GAAG,MAAMP,OAAO,CAACI,OAAR,CAAgBI,UAAhB,GAA6BF,IAA7B,EAAtB;AACA,UAAMG,WAAW,GAAG,MAAMT,OAAO,CAACI,OAAR,CAAgBM,cAAhB,GAAiCJ,IAAjC,EAA1B;AACA,UAAMK,YAAY,GAAG,MAAMX,OAAO,CAACI,OAAR,CAAgBQ,eAAhB,GAAkCN,IAAlC,EAA3B;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ,EAV6B,CAW7B;AACA;AACA;;AAEA,WAAM;AACFY,MAAAA,eAAe,EAAEZ,OADf;AAEFa,MAAAA,YAAY,EAAET,OAFZ;AAGFE,MAAAA,WAAW,EAAEA,WAHX;AAIFE,MAAAA,YAAY,EAAEA;AAJZ,KAAN;AAML;;AAEDM,EAAAA,WAAW,GAAE;AACT,UAAM;AACFF,MAAAA,eADE;AAEFC,MAAAA,YAFE;AAGFP,MAAAA,WAHE;AAIFE,MAAAA;AAJE,QAKF,KAAKZ,KALT;AAMA,UAAMmB,KAAK,GAAG,CAAC;AACXC,MAAAA,MAAM,EAACH,YADI;AAEXI,MAAAA,IAAI,EAAC,kBAFM;AAGXC,MAAAA,WAAW,EAAE,4CAHF;AAIXC,MAAAA,KAAK,EAAE;AAACC,QAAAA,YAAY,EAAE;AAAf;AAJI,KAAD,EAMd;AACIJ,MAAAA,MAAM,EAACV,WADX;AAEIW,MAAAA,IAAI,EAAC,iBAFT;AAGIC,MAAAA,WAAW,EAAE,kDAHjB;AAIIC,MAAAA,KAAK,EAAE;AAACC,QAAAA,YAAY,EAAE;AAAf;AAJX,KANc,EAYd;AACIJ,MAAAA,MAAM,EAACR,YADX;AAEIS,MAAAA,IAAI,EAAC,mBAFT;AAGIC,MAAAA,WAAW,EAAE,yCAHjB;AAIIC,MAAAA,KAAK,EAAE;AAACC,QAAAA,YAAY,EAAE;AAAf;AAJX,KAZc,EAkBd;AACIJ,MAAAA,MAAM,EAACJ,eADX;AAEIK,MAAAA,IAAI,EAAC,iBAFT;AAGIC,MAAAA,WAAW,EAAE,iCAHjB;AAIIC,MAAAA,KAAK,EAAE;AAACC,QAAAA,YAAY,EAAE;AAAf;AAJX,KAlBc,CAAd;AAyBA,WAAO,MAAC,IAAD,CAAM,KAAN;AAAY,MAAA,KAAK,EAAEL;AAAnB,MAAP;AACH;;AAEDM,EAAAA,MAAM,GAAE;AACJ,WACI,MAAC,MAAD,QACK,KAAKP,WAAL,EADL,CADJ;AAKH;;AAjE+B;;AAoEpC,eAAepB,WAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport Layout from '../../components/Layout';\r\nimport Lottery from '../../ethereum/lottery';\r\nimport { Card } from 'semantic-ui-react';\r\n\r\nclass LotteryShow extends Component {\r\n    static async getInitialProps(props){\r\n          const lottery= Lottery(props.query.address);\r\n\r\n         \r\n\r\n          const players = await lottery.methods.getPlayers().call();\r\n          const premium = await lottery.methods.getPremium().call();\r\n          const restPlayers = await lottery.methods.getRestPlayers().call();\r\n          const countPlayers = await lottery.methods.getCountPlayers().call();\r\n          \r\n          console.log(players);\r\n          //console.log(premium);\r\n          //console.log(restPlayers);\r\n          //console.log(countPlayers);\r\n\r\n          return{\r\n              numberOfPlayers: players,\r\n              valuePremium: premium,\r\n              restPlayers: restPlayers,\r\n              countPlayers: countPlayers\r\n          };\r\n    }\r\n\r\n    renderCards(){\r\n        const {\r\n            numberOfPlayers,\r\n            valuePremium,\r\n            restPlayers,\r\n            countPlayers\r\n        } = this.props;\r\n        const items = [{\r\n            header:valuePremium,\r\n            meta:'Value of Premium',\r\n            description: 'The value of premium for winner the raffle',\r\n            style: {overflowWrap: 'break-word'}\r\n        },\r\n        {\r\n            header:restPlayers,\r\n            meta:'How many remain',\r\n            description: 'Number of participants left to complete the draw',\r\n            style: {overflowWrap: 'break-word'}\r\n        },\r\n        {\r\n            header:countPlayers,\r\n            meta:'Number of players',\r\n            description: 'Number of players to carry out the draw',\r\n            style: {overflowWrap: 'break-word'}\r\n        },\r\n        {\r\n            header:numberOfPlayers,\r\n            meta:'Already entered',\r\n            description: 'Players who have already joined',\r\n            style: {overflowWrap: 'break-word'}\r\n        }];\r\n\r\n        return <Card.Group items={items}/>\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <Layout>\r\n                {this.renderCards()}\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LotteryShow;"]},"metadata":{},"sourceType":"module"}